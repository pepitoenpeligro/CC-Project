# server clausule
server {
    # Is listening to all request on 80 port
    listen 80;
    server_name 0.0.0.0;

    # Maintaining the real machine ip who answer the request
    # I will erase this in future in order to protect
    # The real ip directorion of my microserver in order to protect
    # and abstract my services structure
    proxy_set_header X-Real-IP $remote_addr;

    # Used to identify the origin request
    # In other words: client ip
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    #It allows to rewrite http packet to https
    proxy_set_header X-Forwarded-Proto $scheme;

    # Maintin the original host request by the client
    proxy_set_header Host $http_host;

    # Set reverse proxy to enable
    proxy_set_header X-NginX-Proxy true;


    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /api/users
    # To cloudbanking-core container to route /api/users
    # At 3030 port
    location /api/users {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-core:3030;
    }

    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /accounts
    # To cloudbanking-accounts container to route /accounts
    # At 3031 port
    location /accounts {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-account:3031;
    }

    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /cards
    # To cloudbanking-card container to route /cards
    # At 3032 port
    location /cards {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-card:3032;
    }

    # Inverse proxy rule
    # I redirect all 0.0.0.0:80 request in route /funds
    # To cloudbanking-funds container to route /funds
    # At 3033 port
    location /funds {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-funds:3033;
    }

    # Inverse proxy rule
    # I redirect all 0.0.0.0:80 request in route /loans
    # To cloudbanking-loans container to route /loans
    # At 3034 port
    location /loans {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-loans:3034;
    }

    # Default response in /test/nginx
    location /test/nginx {
        add_header Access-Control-Allow-Origin *;
        return 200 'Just a default response!';
    }


    # 404 recursion
    location = /404.html {
        internal;
    }
}



# server clausule
server {
    # Is listening to all request on 80 port
    listen         443 ssl;
    server_name 0.0.0.0;

    ssl_certificate /etc/letsencrypt/live/pepecordoba.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/pepecordoba.site/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Maintaining the real machine ip who answer the request
    # I will erase this in future in order to protect
    # The real ip directorion of my microserver in order to protect
    # and abstract my services structure
    proxy_set_header X-Real-IP $remote_addr;

    # Used to identify the origin request
    # In other words: client ip
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


    #It allows to rewrite http packet to https
    proxy_set_header X-Forwarded-Proto $scheme;

    # Maintin the original host request by the client
    proxy_set_header Host $http_host;

    # Set reverse proxy to enable
    proxy_set_header X-NginX-Proxy true;


    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /api/users
    # To cloudbanking-core container to route /api/users
    # At 3030 port
    location /api/users {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-core:3030;
    }

    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /accounts
    # To cloudbanking-accounts container to route /accounts
    # At 3031 port
    location /accounts {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-account:3031;
    }

    # Inverse proxy.
    # I redirect all 0.0.0.0:80 request in route /cards
    # To cloudbanking-card container to route /cards
    # At 3032 port
    location /cards {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-card:3032;
    }

    # Inverse proxy rule
    # I redirect all 0.0.0.0:80 request in route /funds
    # To cloudbanking-funds container to route /funds
    # At 3033 port
    location /funds {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-funds:3033;
    }

    # Inverse proxy rule
    # I redirect all 0.0.0.0:80 request in route /loans
    # To cloudbanking-loans container to route /loans
    # At 3034 port
    location /loans {
        add_header Access-Control-Allow-Origin *;
        proxy_pass http://cloudbanking-loans:3034;
    }

    # Default response in /test/nginx
    location /test/nginx {
        add_header Access-Control-Allow-Origin *;
        return 200 'Just a default response!';
    }


    # 404 recursion
    location = /404.html {
        internal;
    }
}